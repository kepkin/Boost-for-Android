buildscript {
    repositories {
        maven {
            url "http://dl.bintray.com/kepkin/maven"
        }
    }
    dependencies {
        classpath 'org.bitbucket.aestuarium:babel-build:0.0.2'
    }
}

plugins {
    id "de.undercouch.download" version "1.2"
    id 'com.github.jlouns.cpe' version '0.1.0'
    id 'com.jfrog.bintray' version '1.1'
}

pluginManager.apply 'org.bitbucket.aestuarium.babel-build'

import de.undercouch.gradle.tasks.download.Download

apply from: 'properties.gradle'
apply from: 'publishing.gradle'

task downloadBoost(type: Download) {
    src boostUrl
    dest './'
}

task unzipBoost(type: Copy) {
    from tarTree(resources.bzip2(zipFile))
    into unpackedDir
}

task bootstrapBoost(type: CrossPlatformExec) {
    outputs.file new File(boostDir.getPath(), BabelBuild.IsWindows() ? "b2.exe" : "b2")
    workingDir boostDir
    executable = BabelBuild.IsWindows() ? "bootstrap.bat" : "./bootstrap.sh"
}

task patchForAndroid << {
    ant.patch(patchfile: "patches/boost-${underscoreVersion}/boost-${underscoreVersion}.patch", dir: boostDir, strip: 1)
}

Map<String, List<String> > tasksInToolchainGroups = [:].withDefault { [] }
BabelBuild.toolchains.each { toolchainObj ->
    def parameters = project.cmake.parameters
    def depends = [bootstrapBoost, patchForAndroid]
    def toolchain = toolchainObj.key

    if(toolchainObj.value.os == 'android') {
        task "copyJamExtension-$toolchain"(type: Copy) {
            from "configs/" + toolchainBjamExtensionMap[toolchain]
            into bjamExtensionDir
            rename { "user-config.jam" }
        }

        depends.add("copyJamExtension-$toolchain")
    }

    task "$toolchain-Build" (type: CrossPlatformExec, dependsOn: depends) {
        if(toolchainObj.value.os == 'android') {
            String ndkToolsetRoot = BabelBuild.Android.GetNDKToolsetDir(toolchainObj)
            environment "AndroidToolchainPrefix", BabelBuild.Android.GetNDKToolsetPrefix(toolchainObj)
            environment "AndroidBinariesPath", ndkToolsetRoot
            environment "AndroidNDKCompilerVersion", toolchainObj.value.version
            environment "PATH", BabelBuild.AddToSystemPath(ndkToolsetRoot)
            environment "AndroidNDKRoot", BabelBuild.Android.GetAndroidNDKDir()
            environment "AndroidNDKApiLevel", ndkApiLevel
            environment "NO_BZIP2", "1"

            args "target-os=linux"
        } else if(toolchainObj.value.type == 'native') {
            args "toolset=$BabelBuild.NativeToolchain-$BabelBuild.NativeToolchainVersion"

            doFirst {
                delete new File(bjamExtensionDir.getPath(), "user-config.jam")
            }
        }

        if(toolchain != 'gcc') {
            args "cxxflags=-fPIC"
        }

        workingDir boostDir
        executable = BabelBuild.IsWindows() ? "bjam.exe" : "./bjam"

        args "link=static"
        args "threading=multi"
        args "--layout=versioned"
        args "--stagedir=./../BUILD_$underscoreVersion/" + BabelBuild.prebuilt.GetToolchainId(toolchainObj) //TODO: use boostBuildDir
        args "--build-dir=./../BUILD_$underscoreVersion/" + BabelBuild.prebuilt.GetToolchainId(toolchainObj) + "/obj"
        args // TODO: fix that
        args // "-sICONV_PATH=`pwd`/../libiconv-libicu-android/armeabi"
        args // "-sICU_PATH=`pwd`/../libiconv-libicu-android/armeabi"
        args // "--prefix=./../BUILD_$underscoreVersion/$toolchain"
        args libsToBuild
    }

    tasksInToolchainGroups[toolchainObj.value.type].add("$toolchain-Build")
}

tasksInToolchainGroups.each { key, value ->
    project.task("build-$key", dependsOn: value) {
        group 'Build'
    }
}

task getBoost(dependsOn: [downloadBoost, unzipBoost])
// Following tasks requires to be clean of user-config.jam
bootstrapBoost.doFirst { delete new File(bjamExtensionDir.getPath(), "user-config.jam") }
